//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AuthTask
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DotNetTrainingEntities1 : DbContext
    {
        public DotNetTrainingEntities1()
            : base("name=DotNetTrainingEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddIn> AddIns { get; set; }
        public virtual DbSet<AmazonCredential> AmazonCredentials { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<Connector> Connectors { get; set; }
        public virtual DbSet<ConnectorType> ConnectorTypes { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerSubscription> CustomerSubscriptions { get; set; }
        public virtual DbSet<CustomField> CustomFields { get; set; }
        public virtual DbSet<DayReportLog> DayReportLogs { get; set; }
        public virtual DbSet<DefaultMapping> DefaultMappings { get; set; }
        public virtual DbSet<Empdetail> Empdetails { get; set; }
        public virtual DbSet<Erpsystem> Erpsystems { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<ExecutionLog> ExecutionLogs { get; set; }
        public virtual DbSet<FileCabinet> FileCabinets { get; set; }
        public virtual DbSet<HelpTextData> HelpTextDatas { get; set; }
        public virtual DbSet<Integrator> Integrators { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<NetSuiteStandardField> NetSuiteStandardFields { get; set; }
        public virtual DbSet<partnersign> partnersigns { get; set; }
        public virtual DbSet<QuoteRequest> QuoteRequests { get; set; }
        public virtual DbSet<RefreshToken> RefreshTokens { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<schedulerProcessRunningLog> schedulerProcessRunningLogs { get; set; }
        public virtual DbSet<Service_Login> Service_Login { get; set; }
        public virtual DbSet<SetUpRecord> SetUpRecords { get; set; }
        public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }
        public virtual DbSet<SupportStatu> SupportStatus { get; set; }
        public virtual DbSet<SupportTicket> SupportTickets { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<test> tests { get; set; }
        public virtual DbSet<TicketResponce> TicketResponces { get; set; }
        public virtual DbSet<User_Roles> User_Roles { get; set; }
        public virtual DbSet<UserConnector> UserConnectors { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Webhook_Request> Webhook_Request { get; set; }
    
        public virtual ObjectResult<f_overviewelements_Result> f_overviewelements(Nullable<int> integratorid)
        {
            var integratoridParameter = integratorid.HasValue ?
                new ObjectParameter("integratorid", integratorid) :
                new ObjectParameter("integratorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_overviewelements_Result>("f_overviewelements", integratoridParameter);
        }
    
        public virtual ObjectResult<AdminDashBoardElements_Result> AdminDashBoardElements()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdminDashBoardElements_Result>("AdminDashBoardElements");
        }
    
        public virtual int AdminDashboardTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdminDashboardTables");
        }
    
        public virtual int ClearEmptylogins()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearEmptylogins");
        }
    
        public virtual int CustomerNsCrUpdate(Nullable<int> customerID, string nsEmail, string nsPassword, string nsRoleKey, string nsAccount, string nsAppID, string nsConsumerKey, string nsConsumerSecret, string nsTokenID, string nsTokenSecret)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var nsEmailParameter = nsEmail != null ?
                new ObjectParameter("nsEmail", nsEmail) :
                new ObjectParameter("nsEmail", typeof(string));
    
            var nsPasswordParameter = nsPassword != null ?
                new ObjectParameter("nsPassword", nsPassword) :
                new ObjectParameter("nsPassword", typeof(string));
    
            var nsRoleKeyParameter = nsRoleKey != null ?
                new ObjectParameter("nsRoleKey", nsRoleKey) :
                new ObjectParameter("nsRoleKey", typeof(string));
    
            var nsAccountParameter = nsAccount != null ?
                new ObjectParameter("nsAccount", nsAccount) :
                new ObjectParameter("nsAccount", typeof(string));
    
            var nsAppIDParameter = nsAppID != null ?
                new ObjectParameter("nsAppID", nsAppID) :
                new ObjectParameter("nsAppID", typeof(string));
    
            var nsConsumerKeyParameter = nsConsumerKey != null ?
                new ObjectParameter("nsConsumerKey", nsConsumerKey) :
                new ObjectParameter("nsConsumerKey", typeof(string));
    
            var nsConsumerSecretParameter = nsConsumerSecret != null ?
                new ObjectParameter("nsConsumerSecret", nsConsumerSecret) :
                new ObjectParameter("nsConsumerSecret", typeof(string));
    
            var nsTokenIDParameter = nsTokenID != null ?
                new ObjectParameter("nsTokenID", nsTokenID) :
                new ObjectParameter("nsTokenID", typeof(string));
    
            var nsTokenSecretParameter = nsTokenSecret != null ?
                new ObjectParameter("nsTokenSecret", nsTokenSecret) :
                new ObjectParameter("nsTokenSecret", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerNsCrUpdate", customerIDParameter, nsEmailParameter, nsPasswordParameter, nsRoleKeyParameter, nsAccountParameter, nsAppIDParameter, nsConsumerKeyParameter, nsConsumerSecretParameter, nsTokenIDParameter, nsTokenSecretParameter);
        }
    
        public virtual int CustomerTokenUpdate(Nullable<int> customerId, string verifyToken, Nullable<System.DateTime> vt_CreatedDate)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            var verifyTokenParameter = verifyToken != null ?
                new ObjectParameter("verifyToken", verifyToken) :
                new ObjectParameter("verifyToken", typeof(string));
    
            var vt_CreatedDateParameter = vt_CreatedDate.HasValue ?
                new ObjectParameter("vt_CreatedDate", vt_CreatedDate) :
                new ObjectParameter("vt_CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerTokenUpdate", customerIdParameter, verifyTokenParameter, vt_CreatedDateParameter);
        }
    
        public virtual int CustomerVerified(string verifyToken, Nullable<int> modifiedBy, ObjectParameter eRROR)
        {
            var verifyTokenParameter = verifyToken != null ?
                new ObjectParameter("verifyToken", verifyToken) :
                new ObjectParameter("verifyToken", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerVerified", verifyTokenParameter, modifiedByParameter, eRROR);
        }
    
        public virtual int GetAuthorizations(Nullable<int> integratorID)
        {
            var integratorIDParameter = integratorID.HasValue ?
                new ObjectParameter("IntegratorID", integratorID) :
                new ObjectParameter("IntegratorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAuthorizations", integratorIDParameter);
        }
    
        public virtual ObjectResult<GetAutiLog_Result> GetAutiLog(Nullable<int> integratorid)
        {
            var integratoridParameter = integratorid.HasValue ?
                new ObjectParameter("Integratorid", integratorid) :
                new ObjectParameter("Integratorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAutiLog_Result>("GetAutiLog", integratoridParameter);
        }
    
        public virtual ObjectResult<GetAutiLogRecords_Result> GetAutiLogRecords(Nullable<int> integratorid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var integratoridParameter = integratorid.HasValue ?
                new ObjectParameter("Integratorid", integratorid) :
                new ObjectParameter("Integratorid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAutiLogRecords_Result>("GetAutiLogRecords", integratoridParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetConnectorSubscriptions_Result> GetConnectorSubscriptions(Nullable<int> connectorId)
        {
            var connectorIdParameter = connectorId.HasValue ?
                new ObjectParameter("connectorId", connectorId) :
                new ObjectParameter("connectorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConnectorSubscriptions_Result>("GetConnectorSubscriptions", connectorIdParameter);
        }
    
        public virtual ObjectResult<GetCustomerConnectors_Result> GetCustomerConnectors(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerConnectors_Result>("GetCustomerConnectors", customerIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerIntegrations_Result> GetCustomerIntegrations(Nullable<int> customerId, Nullable<int> connectorId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            var connectorIdParameter = connectorId.HasValue ?
                new ObjectParameter("connectorId", connectorId) :
                new ObjectParameter("connectorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerIntegrations_Result>("GetCustomerIntegrations", customerIdParameter, connectorIdParameter);
        }
    
        public virtual ObjectResult<GetCustomersBOEmail_Result> GetCustomersBOEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomersBOEmail_Result>("GetCustomersBOEmail", emailParameter);
        }
    
        public virtual ObjectResult<GetDayAuditReport_Result> GetDayAuditReport(Nullable<int> integratorID)
        {
            var integratorIDParameter = integratorID.HasValue ?
                new ObjectParameter("IntegratorID", integratorID) :
                new ObjectParameter("IntegratorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDayAuditReport_Result>("GetDayAuditReport", integratorIDParameter);
        }
    
        public virtual ObjectResult<GetErrorLog_Result> GetErrorLog(Nullable<int> integratorid)
        {
            var integratoridParameter = integratorid.HasValue ?
                new ObjectParameter("Integratorid", integratorid) :
                new ObjectParameter("Integratorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetErrorLog_Result>("GetErrorLog", integratoridParameter);
        }
    
        public virtual ObjectResult<GetErrorLogRecords_Result> GetErrorLogRecords(Nullable<int> integratorid, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var integratoridParameter = integratorid.HasValue ?
                new ObjectParameter("Integratorid", integratorid) :
                new ObjectParameter("Integratorid", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetErrorLogRecords_Result>("GetErrorLogRecords", integratoridParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int GetLast12MonthsData(Nullable<int> integratorid)
        {
            var integratoridParameter = integratorid.HasValue ?
                new ObjectParameter("Integratorid", integratorid) :
                new ObjectParameter("Integratorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetLast12MonthsData", integratoridParameter);
        }
    
        public virtual int Getsevendaysdata(Nullable<int> integratorid)
        {
            var integratoridParameter = integratorid.HasValue ?
                new ObjectParameter("integratorid", integratorid) :
                new ObjectParameter("integratorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getsevendaysdata", integratoridParameter);
        }
    
        public virtual ObjectResult<GetSubscriptionPlans_Result> GetSubscriptionPlans()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubscriptionPlans_Result>("GetSubscriptionPlans");
        }
    
        public virtual int ManageFieldMappings(Nullable<int> integratorID, string fieldMappingJson, Nullable<int> processType)
        {
            var integratorIDParameter = integratorID.HasValue ?
                new ObjectParameter("IntegratorID", integratorID) :
                new ObjectParameter("IntegratorID", typeof(int));
    
            var fieldMappingJsonParameter = fieldMappingJson != null ?
                new ObjectParameter("FieldMappingJson", fieldMappingJson) :
                new ObjectParameter("FieldMappingJson", typeof(string));
    
            var processTypeParameter = processType.HasValue ?
                new ObjectParameter("ProcessType", processType) :
                new ObjectParameter("ProcessType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageFieldMappings", integratorIDParameter, fieldMappingJsonParameter, processTypeParameter);
        }
    
        public virtual ObjectResult<ServiceLoginDetails_Result> ServiceLoginDetails(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServiceLoginDetails_Result>("ServiceLoginDetails", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateFieldMappings(string keyComponent, Nullable<int> integratorID, string paramBody)
        {
            var keyComponentParameter = keyComponent != null ?
                new ObjectParameter("KeyComponent", keyComponent) :
                new ObjectParameter("KeyComponent", typeof(string));
    
            var integratorIDParameter = integratorID.HasValue ?
                new ObjectParameter("IntegratorID", integratorID) :
                new ObjectParameter("IntegratorID", typeof(int));
    
            var paramBodyParameter = paramBody != null ?
                new ObjectParameter("ParamBody", paramBody) :
                new ObjectParameter("ParamBody", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFieldMappings", keyComponentParameter, integratorIDParameter, paramBodyParameter);
        }
    
        public virtual int UpdateIntegratorFields(Nullable<int> integratorId, string columnName, string columnValue)
        {
            var integratorIdParameter = integratorId.HasValue ?
                new ObjectParameter("integratorId", integratorId) :
                new ObjectParameter("integratorId", typeof(int));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("columnName", columnName) :
                new ObjectParameter("columnName", typeof(string));
    
            var columnValueParameter = columnValue != null ?
                new ObjectParameter("columnValue", columnValue) :
                new ObjectParameter("columnValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIntegratorFields", integratorIdParameter, columnNameParameter, columnValueParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> UpdateIntegratorIEStatus(Nullable<int> integratorid, string keyComponent)
        {
            var integratoridParameter = integratorid.HasValue ?
                new ObjectParameter("integratorid", integratorid) :
                new ObjectParameter("integratorid", typeof(int));
    
            var keyComponentParameter = keyComponent != null ?
                new ObjectParameter("KeyComponent", keyComponent) :
                new ObjectParameter("KeyComponent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("UpdateIntegratorIEStatus", integratoridParameter, keyComponentParameter);
        }
    
        public virtual int UpdateIntegratorRunningStatus(Nullable<int> pk_IntegratorID, string process, Nullable<int> runningStatus)
        {
            var pk_IntegratorIDParameter = pk_IntegratorID.HasValue ?
                new ObjectParameter("Pk_IntegratorID", pk_IntegratorID) :
                new ObjectParameter("Pk_IntegratorID", typeof(int));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var runningStatusParameter = runningStatus.HasValue ?
                new ObjectParameter("RunningStatus", runningStatus) :
                new ObjectParameter("RunningStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIntegratorRunningStatus", pk_IntegratorIDParameter, processParameter, runningStatusParameter);
        }
    
        public virtual ObjectResult<UserLoginDetails_Result> UserLoginDetails(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserLoginDetails_Result>("UserLoginDetails", userNameParameter, passwordParameter);
        }
    }
}
